/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hhqcs.form;

import hhqcs.tools.Debug;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author gkovacs02
 */
public class LogViewer extends javax.swing.JFrame {

    private Debug debug;
    private String Path = null;
    private File folder;
    private File[] listOfFiles;
    private final String separator = System.getProperty("file.separator");
    private DefaultTableModel model;
    private long size;

    /**
     * Creates new form logviewer
     */
    public LogViewer() {
        initComponents();
        myInitComponents();
        System.out.println("LogViewer létrehozva");
        debug.printDebugMsg(null, LogViewer.class.getName(),
                "LogViewer létrehozva");
    }

    public LogViewer(Debug debug) {
        this.debug = debug;
        this.Path = debug.getLogPath();
        initComponents();
        myInitComponents();
        System.out.println("LogViewer létrehozva");
        debug.printDebugMsg(null, LogViewer.class.getName(),
                "LogViewer létrehozva");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {

                Component comp = super.prepareRenderer(renderer, row, col);

                JComponent jcomp = (JComponent) comp;

                if (comp == jcomp) {

                    jcomp.setToolTipText((String) getValueAt(row, col));

                }

                return comp;

            }

        };
        jComboBox2 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Esemény napló");
        setName("logViewer"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dátum", "Státusz", "Osztály", "Bejegyzés"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(10);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(jComboBox2, gridBagConstraints);

        jLabel1.setText("Log fájl kiválasztása");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

        List<String> lines;
        try {
            // lines = Files.readAllLines(Paths.get(this.Path + separator + this.jComboBox2.getSelectedItem()), StandardCharsets.UTF_8);
            File f = new File(this.Path + separator + this.jComboBox2.getSelectedItem());
            size = f.length();
            System.out.println(size);
            lines = Files.readAllLines(Paths.get(this.Path + separator + this.jComboBox2.getSelectedItem()), Charset.defaultCharset());
            String[] a;
            model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            if (lines.size() > model.getRowCount()) {
                for (int i = model.getRowCount(); i < lines.size(); i++) {

                    String replace = lines.get(i).replaceAll("(warning)", "[warning]");
                    replace = replace.replaceAll("(error)", "[error]");
                    replace = replace.replaceAll("[\\[]", "");
                    replace = replace.replaceAll("\\t", "");
                    //System.out.println(replace);
                    a = replace.split("\\]");

                    Object[] oneRowMessage = new String[4];
                    if (a.length == 3) {
                        oneRowMessage[0] = a[0];
                        oneRowMessage[1] = "info";
                        oneRowMessage[2] = a[1];
                        oneRowMessage[3] = a[2].trim();
                        model.addRow(oneRowMessage);

                    } else if (a.length == 4) {

                        oneRowMessage[0] = a[0];
                        oneRowMessage[1] = a[1];
                        oneRowMessage[2] = a[2];
                        oneRowMessage[3] = a[3].trim();
                        model.addRow(oneRowMessage);
                    } else if (a.length == 1) {

                        model.setValueAt(model.getValueAt(model.getRowCount() - 1, 3) + a[0], model.getRowCount() - 1, 3);
                    } else {
                        // System.err.println("A oneRowMessage hossza: " + a.length + " :" + line);
                    }
                }
                resizeColumnWidth(jTable1);
            }
        } catch (IOException ex) {

        }

    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("Convert2Lambda")
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LogViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void myInitComponents() {
        folder = new File(this.Path);
        listOfFiles = folder.listFiles();
        javax.swing.DefaultComboBoxModel m = new javax.swing.DefaultComboBoxModel();

        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                if (listOfFiles[i].getName().contains(debug.getdebugName())) {
                    m.addElement(listOfFiles[i].getName());
                    //System.out.println("File: " + listOfFiles[i].getName());
                } else {
                    //System.out.println(listOfFiles[i].getName()+" is not matches with "+debug.getdebugName());
                }
            } else if (listOfFiles[i].isDirectory()) {
                // System.out.println("Directory " + listOfFiles[i].getName());
            }
        }
        jComboBox2.setModel(m);
        setExtendedState(LogViewer.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);    // centers on screen
        jComboBox2.setSelectedItem(debug.getActualFileName());
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setBackground(row % 2 == 0 ? Color.LIGHT_GRAY : Color.WHITE);
                return c;
            }
        });

        Thread timer = new Thread("Timer(másodpercenként futó)") {
            @Override
            public void run() {
                while (true) {
                    try {
                        synchronized (this) {
                            wait(1000);
                            File f = new File(LogViewer.this.Path + separator + LogViewer.this.jComboBox2.getSelectedItem());
                            if (size != f.length()) {
                                size = f.length();

                                List<String> lines = Files.readAllLines(Paths.get(LogViewer.this.Path + separator + LogViewer.this.jComboBox2.getSelectedItem()), Charset.defaultCharset());
                                String[] a;
                                model = (DefaultTableModel) jTable1.getModel();
                                for (String line : lines) {
                                    // System.out.println(line);
                                    String replace = line.replaceAll("(warning)", "[warning]");
                                    replace = replace.replaceAll("(error)", "[error]");
                                    replace = replace.replaceAll("[\\[]", "");
                                    replace = replace.replaceAll("\\t", "");
                                    //System.out.println(replace);
                                    a = replace.split("\\]");

                                    Object[] oneRowMessage = new String[4];
                                    if (a.length == 3) {
                                        oneRowMessage[0] = a[0];
                                        oneRowMessage[1] = "info";
                                        oneRowMessage[2] = a[1];
                                        oneRowMessage[3] = a[2].trim();
                                        model.addRow(oneRowMessage);

                                    } else if (a.length == 4) {

                                        oneRowMessage[0] = a[0];
                                        oneRowMessage[1] = a[1];
                                        oneRowMessage[2] = a[2];
                                        oneRowMessage[3] = a[3].trim();
                                        model.addRow(oneRowMessage);
                                    } else if (a.length == 1) {

                                        model.setValueAt(model.getValueAt(model.getRowCount() - 1, 3) + a[0], model.getRowCount() - 1, 3);
                                    } else {
                                        // System.err.println("A oneRowMessage hossza: " + a.length + " :" + line);
                                    }
                                }
                            }
                            resizeColumnWidth(jTable1);
                        }
                    } catch (Exception ex) {
                        System.err.println("ex");
                    }
                }
            }
        };
        timer.start();

    }

    @SuppressWarnings("override")

    public void dispose() {
        super.dispose();
    }

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
}
